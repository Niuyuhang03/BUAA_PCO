.data
.text
	#测试ori指令
	#第三个立即数是无符号扩展，不存在负数的情况
	ori $a0, $0, 123		#测试与0进行or运算0|0111_1011=0111_1011
	ori $a1, $a0, 456		#测试两个非0数的or运算0111_1011|1_1100_1000=1_1111_1011
	ori $0, $0, 123			#测试写入0号寄存器
	
	#测试lui指令
	lui $a2, 123			#测试，构造正数0111_1011_0000_0000_0000_0000
	lui $a3, 0xffff			#测试，构造负数0xffff0000
	
	#测试addu指令
	#无符号相加，不存在负数情况
	addu $s0, $a0, $a2		#测试正数相加0111_1011+0111_1011_0000_0000_0000_0000=?0111_1011_0000_0000_0111_1011
	
	#测试subu指令
	#无符号相减，不存在负数情况
	subu $s1, $a2, $a0		#测试正数相减0111_1011_0000_0000_0000_0000-0111_1011=111_1010_1111_1111_1000_0101
	
	#测试sw指令
	ori $t0, $t0, 0x0000		#构造0
	sw $a0, 0($t0)			#测试0111_1011存入内存
	sw $a1, 4($t0)			#测试1_1111_1011存入内存
	
	#测试lw指令
	lw $s0, 0($t0)			#测试内存里数0111_1011写入寄存器
	lw $s1, 4($t0)			#测试内存里数1_1111_1011写入寄存器
	
	#测试beq指令
	ori $a0, $0, 1			#构造1
	ori $a1, $0, 2			#构造2
	ori $a2, $0, 1			#构造1
	beq $a0, $a1, loop1		#测试不跳转
	nop
	beq $a0, $a2, loop2		#测试跳转
	nop

loop1:ori $a0, $0, 0
loop2:ori $a1, $0, 0
	
	#测试jal,jr指令
	ori $s2, $2, 1
	ori $s3, $2, 2
	addu $s4, $s2, $s3
	jal loop
	nop
	jal end
	nop
	
	ori $s2, $2, 3
loop:	ori $s3, $2, 4
	jr $ra
end:	nop

	#测试bgez
	ori $t0, $0, 1
	subu $t0, $0, $t0
	ori $t1, $0, 1
	bgez $t0, loop3			#测试不跳转
	nop
	bgez $t1, loop4			#测试跳转
	nop
loop3:
	ori $t2, $0, 1
loop4:
	ori $t3, $0, 2
	
	#测试jalr
	ori $t4, $0, 0x000030b4
	jalr $t5, $t4
	nop
	ori $t6, $0, 1

	ori $t4, $0, 1

	#测试lb
	lui $t6, 0x8234
	ori $t6, $t6, 0x5678
	sw $t6, 0($0)
	lb $t0, 0($0)
	lb $t1, 1($0)
	lb $t2, 2($0)
	lb $t3, 3($0)
	
	#测试sb
	sw $0, 0($0)
	sb $t6, 0($0)
	sb $t6, 1($0)
	sb $t6, 2($0)
	sb $t6, 3($0)
	
	#测试srav
	ori $t1, $0, 1
	ori $t2, $0, 2
	ori $t3, $0, 3
	srav $t1, $t6, $t1
	srav $t2, $t6, $t2
	srav $t3, $t6, $t3
